@using Skillap.BLL.DTO;
@using Skillap.DAL.Entities;
@using Skillap.MVC.ViewModels;
@using Skillap.DAL.Interfaces 
@using Skillap.BLL.Interfaces.IServices;
@using Skillap.DAL.EF; 
@using Microsoft.EntityFrameworkCore; 
@inject IAuthService userService;
@inject IUnitOfWork uow; 
@inject DataContext db;
@model Posts;
@{
    int? sum = 0;
    var user = await userService.GetUserAsync(this.User.Identity.Name);

    //sum = Model.PostsLiked.Where(pl => pl.PostId == Model.Id && pl.UserId == user.Id).Select(t => t.Score).Sum();
    sum = db.LikedPosts.Where(pl => pl.PostId == Model.Id).Sum(t => t.Score);

    var tags = await (from t in db.Tags
                      join pt in db.PostsTags
                      on t.Id equals pt.TagId
                      join p in db.Posts
                      on pt.PostId equals p.Id
                      where p.Id == Model.Id
                      select t).ToListAsync();

    var usersPost = await (from p in db.Posts
                           join lp in db.LikedPosts
                           on p.Id equals lp.PostId
                           where p.Id == Model.Id
                           join creator in db.Users
                           on lp.UserId equals user.Id
                           where creator.Id == user.Id
                           where lp.isCreator == true
                           select p).ToListAsync();

    //sum = await uow.LikedPosts.FindAsync(pl => pl.PostId == Model.Id);

    Layout = "~/Views/Shared/_PostLayout.cshtml";
}


<div class="container">
    <div class="row">
        <div class="col">
            <p class="text-center">@Model.Name</p>
            <p class="">@Model.Description</p>
            <br />
            <span>
                Tags:
                @foreach (Tags t in tags)
                {
                    <span>@t.Name</span>
                }
            </span>
            <br />
            <span class="align-items-end">@Model.CreatedTime</span>
            @if (usersPost.Count > 0)
            {
                <div class=""><a class="btn-primary mr-2" asp-action="EditPost" asp-controller="Post" asp-route-id="@Model.Id">Edit</a><a class="btn-primary" asp-action="DeletePost" asp-controller="Post" asp-route-id="@Model.Id">Delete</a></div>
            }


            <div>
                <span>
                    @Html.ActionLink("Like", "Like", "Post", new { id = Model.Id })
                </span>
                /
                <span>
                    @Html.ActionLink("Dislike", "Dislike", "Post", new { id = Model.Id })
                </span>


                <p>@sum --- Score</p>


            </div>
        </div>



    </div>
    <div class="row">
        <div class="col">
            @*@Html.Raw(Model.Comments)*@
            @{
                @Html.RenderPartialAsync("MainCommentView", new CommentViewModel { PostId = Model.Id, Id = 0 })
            }
            @foreach (var c in Model.Comments)
            {
                var sum2 = db.LikedComments.Where(lc => lc.CommentId == c.Id).Sum(s => s.Score);
                <div id="#comment">
                    <p>
                        @c.Content --- @c.CreatedTime --- <span>@Html.ActionLink("Like", "LikeComment", "Post", new { id = c.Id })</span> / <span>@Html.ActionLink("Dislike", "DislikeComment", "Post", new { id = c.Id })</span>
                    </p>
                </div>

            }

        </div>
    </div>

</div>
